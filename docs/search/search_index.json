{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a la pagina de Carlos","text":"<p>Vamos a poner aqui un resumen de las practicas que hemos estado haciendo durante el curso de ASIR en el modulo IAW.</p> <p>Esto puedes encontrarlo en la seccion de Primer trimestre y Segundo trimestre</p> <p></p>"},{"location":"practica14-1/","title":"iaw-practica-14-1","text":"<p>Practica 14-1</p> <p>Voy a hacer una especie de introduccion de que va la practica. Estamos creandonos una instancia en la que en esa misma instancia vamos a usar docker para poder usar los contenedores y poder tener en una misma maquina instalado mysql, wordpress, phpmyadmin y el certificado. Esto se dividira en redes y volumenes.</p> <p>Para explicar practica vamos a dividirla en varios pasos:</p> <p>Paso 1: Vamos a crearnos una instancia con terraform, a esta maquina le vamos a a\u00f1adir el grupo de seguridad y una ip elastica(esto esta explicado en las anteriores practicas). </p> <p>Muestro el grupo de seguridad:</p> <p></p> <p>Muestro la creacion de la instancia y de la ip elastica:</p> <p></p> <p>Paso 2 Hay que instalarnos docker y docker compose, para esto vamos a utilizar ansible:</p> <p></p> <p>Ahora vamos a a\u00f1adir los paquetes de python para docker y movemos el directorio a la instancia:</p> <p></p> <p>Paso 3</p> <p>Ahora tenemos que crearnos los contenedores, los volumenes y las redes en nuestra instancia. Para esto vamos a usar la pagina docker hub para usar las imagines oficiales de las que vamos a usar. En nuestro caso nos pide la practica usar las imagenes de phpmyadmin, wordpress, mysql y https-service.</p> <p>Para wordpress:</p> <p></p> <p>Para mysql:</p> <p></p> <p>Para phpmyadmin:</p> <p></p> <p>Para https-portal(este seria el certificado como certbot):</p> <p></p> <p>Ahora muestro los volumenes y las redes:</p> <p></p> <p>Recordatorio= Para poder ejecutar docker compose hay que instalarse en nuestra maquina:</p> <p></p> <p>Las variables usadas son:</p> <p></p> <p>Paso 4 </p> <p>Hay que asignar a nuestra ip un dominio, en mi caso he usado la pagina de noip.com:</p> <p></p> <p>Esto hay que a\u00f1adirlo en nuestro https-portal.</p> <p>Paso 5</p> <p>Comprobamos que funciona, para esto vamos a poner nuestro dominio en nuestro navegador:</p> <p></p> <p>Y seguimos los pasos hasta llegar a nuestro wordpress:</p> <p></p>"},{"location":"practica14-2/","title":"iaw-practica-14-2","text":"<p>Practica 14-2</p> <p>Voy a hacer una especie de introduccion de que va la practica. Estamos creandonos una instancia en la que en esa misma instancia vamos a usar docker para poder usar los contenedores y poder tener en una misma maquina instalado mysql, prestashop, phpmyadmin y el certificado. Esto se dividira en redes y volumenes.</p> <p>Para explicar practica vamos a dividirla en varios pasos:</p> <p>Paso 1: Vamos a crearnos una instancia con terraform, a esta maquina le vamos a a\u00f1adir el grupo de seguridad y una ip elastica(esto esta explicado en las anteriores practicas). </p> <p>Muestro el grupo de seguridad:</p> <p></p> <p>Muestro la creacion de la instancia y de la ip elastica:</p> <p></p> <p>Paso 2 Hay que instalarnos docker y docker compose, para esto vamos a utilizar ansible:</p> <p></p> <p>Ahora vamos a a\u00f1adir los paquetes de python para docker y movemos el directorio a la instancia:</p> <p></p> <p>Paso 3</p> <p>Ahora tenemos que crearnos los contenedores, los volumenes y las redes en nuestra instancia. Para esto vamos a usar la pagina docker hub para usar las imagines oficiales de las que vamos a usar. En nuestro caso nos pide la practica usar las imagenes de phpmyadmin, prestashop, mysql y https-service.</p> <p>Para prestashop:</p> <p></p> <p>Para mysql:</p> <p></p> <p>Para phpmyadmin:</p> <p></p> <p>Para https-portal(este seria el certificado como certbot):</p> <p></p> <p>Ahora muestro los volumenes y las redes:</p> <p></p> <p>Recordatorio= Para poder ejecutar docker compose hay que instalarse en nuestra maquina:</p> <p></p> <p>Las variables usadas son:</p> <p></p> <p>Paso 4 </p> <p>Hay que asignar a nuestra ip un dominio, en mi caso he usado la pagina de noip.com:</p> <p></p> <p>Esto hay que a\u00f1adirlo en nuestro https-portal.</p> <p>Paso 5</p> <p>Comprobamos que funciona, para esto vamos a poner nuestro dominio en nuestro navegador:</p> <p></p>"},{"location":"practica14-4/","title":"iaw-practica-14-4","text":"<p>Practica 14-4</p> <p>Para esta practica vamos a querer crear el juego 2048 mediante docker. Para esto vamos a necesitar tener un archivo de dockerfile y un docker-compose.yml</p> <p>Vamos a necesitar previamente tener instalado docker y docker-compose</p> <pre><code>sudo apt install docker.io\nsudo apt install docker-compose\n</code></pre> <p>Vamos a empezar a explicar el dockerfile.</p> <p></p> <p>Como vemos esto tiene una estructura muy basica. Simplemente seleccionamos la imagen, actualizamos el sistema e instalamos git. Hacemos una clonacion del repositorio del Jose Juan y lo guardamos en tmp/2048 y copiamos su contenido en /usr/share/nginx/html. Ahora indicamos el puerto por donde va a salir y indicamos el comando que se ejecuta al crear el contenedor de nginx.</p> <p>Ahora vamos a mirar el archivo docker-compose.yml:</p> <p></p> <p>Simplemente nos creamosel servicio de nginx, seleccionamos el archivo anterior y seleccionamos el puerto por el que va a salir.</p> <p>Para poder ejecutar el dockerfile:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Para comprobar que funciona vamos a usar el comando:</p> <pre><code>docker images\n</code></pre> <p>Como vemos nos muestra todas las imagenes creadas:</p> <p></p> <p>Para comprobar que nos funciona:</p> <p></p>"},{"location":"practica7/","title":"iaw-Practica-07","text":"<p>practica7</p> <p>Para poder realizar esta practica vamos a necesitar un total de 3 m\u00e1quinas, en mi caso una maquina llamada frontend, otra backend y por \u00faltimo mi maquina Open Suse de wsl. Para entender que vamos a realizar en esta actividad, vamos a configurar la maquina Open Suse para que esta sea capaz de ejecutar todos los comandos que necesitamos en las m\u00e1quinas de un solo script. Despu\u00e9s vamos a tener en la maquina fronted los script para crear el servidor Apache. Por \u00faltimo, vamos a tener en la m\u00e1quina backend los scripts para crear el servidor MYSQL.</p> <p>Bien, ahora explicado esto vamos a irnos a la maquina frontend. En esta maquina vamos a tener 3 archivos, el install, el deploy y un archivo con las variables: Las variables que vamos a usar son:</p> <p></p> <p>El install del front es instalar apache y sus m\u00f3dulos PHP:</p> <p></p> <p>En el deploy_frontend movemos el condigo fuente cambiamos permisos y configuramos las variables:</p> <p></p> <p>En la m\u00e1quina del backend tenemos los mismos archivos. En el install_backend tenemos la instalaci\u00f3n de mysql server: </p> <p></p> <p>En el deploy_backend tenemos la creaci\u00f3n de la base de datos y su usuario y la importaci\u00f3n de la base de datos:</p> <p></p> <p>(Las variables son las mismas) Ahora nos falta la maquina WSL OpenSuse(en mi caso). En esta m\u00e1quina vamos a tener un total de:</p> <p></p> <p>La funci\u00f3n de los deploys, installs y variables es la misma pero escrito en yml. En el inventario es donde vamos a poner la ip publica de nuestras dos maquinas y donde vamos a mostrar donde esta nuestra clave privada(vockey.pem):</p> <p></p> <p>En la main.yml es donde vamos a tener la ejecuci\u00f3n de todos los yml anteriores ejecutando solo ese:</p> <p></p> <p>Con el comando import_playbook: (nombre del archivo) se empezaran a ejecutar todos los yml. Para confirmar que funciona podemos hacerlo de dos maneras: 1 Poniendo en nuestro navegador la ip de nuestra maquina front</p> <p></p> <p>2 Poniendo en nuestra maquina front el comando mysql -u db_user -p -h (54.161.171.231) y nos deber\u00eda de dejar conectarnos al mysql de la mauqina backend.</p> <p></p>"},{"location":"practica8/","title":"iaw-practica-08","text":"<p>Para esta practica vamos a necesitar un total de 4 m\u00e1quinas. Una maquina Backend donde vamos a tener instalado MYSQL. Despues dos m\u00e1quinas frontend donde vamos a instalar Apache. Por ultimo vamos a tener una maquina balanceador donde vamos a tener instalado apache y vamos a instalarnos un proxy inverso.</p> <p>Ahora vamos a ver como seria la instalacion en yml de la maquina backend donde tendremos MYSQL. El install_backend tenemos que instalar MYSQL:</p> <p></p> <p>El deploy_backend realizamos la instalacion de los modulos y la creacion de la base de datos:</p> <p></p> <p>Ahora voy a explicar el frontend, como en los dos frontend vamos a tener lo mismo lo voy a explicar una vez. Lo primero que vamos a hacer es realizar la instalacion del servidor Apache2:</p> <p></p> <p>Ahora vamos a irnos al deploy_Frontend donde vamos a configurar las variables de la base de datos:</p> <p></p> <p>Ahora para la maquina que va a hacer de balanceador, vamos a usar el mismo install que el frontend, osea que instalamos el apache lo primero. Ahora vmaos a hacer el balanceador, para eso vamos a usar el proxy inverso. Para esto primero nos vamos a instalar los modulos necesarios(en mi caso he puesto un bucle):</p> <p></p> <p>Ahora vamos a configurar los archivos conf:</p> <p></p> <p>Ahora vamos a instalar certbor, para instalar certbot he tenido que usar el comando ansible-galaxy collection install community.general Instalamos snap y despues instalamos certbot y ejecutamos el certificado:</p> <p></p> <p>Comprobamos que nos funciona, para esto tenemos que buscar en el navegador primero nuestro dominio, como vemos nos sale nuestro index.php. </p> <p></p> <p>Ahora modifico un index.php de algun frontend, y si refrescamos la pagina podemos ver como con el mismo dominio puedo usar dos frontend distintos:</p> <p></p>"},{"location":"practica9/","title":"iaw-practica-09","text":"<p>Practica 9</p> <p>Para esta practica vamos a dividirlo en 3 fases, fase 0, fase 1 y fase2. Vamos a empezar por la fase 00.</p>"},{"location":"practica9/#fase-0","title":"Fase 0","text":"<p>Para la fase 0 vamos a necesitar unicamente una maquina donde vamos a meter todo lo necesario. Lo primero que vamos a hacer es crearnos un archivo de install_lamp.yml donde vamos a realizar las instalaciones del servidor Apache2 y de MYSQL:</p> <p></p> <p>Ahora vamos a crear otro archivo llamado deploy_wordpress.yml donde vamos a empezar por instalarnos unzip y despues wordpress:</p> <p></p> <p>Ahora vamos a descomprimir wordpress con unzip y vamos a darle permisos de usuario y grupo a www-data:</p> <p></p> <p>Ahora vamos a instalar el gestor de paquetes Python 3, el m\u00f3dulo pypmysql y vamos a crearnos la Base de datos y el usuario de Wordpress:</p> <p></p> <p>Ahora vamos a configurar las variables de conexi\u00f3n:</p> <p></p> <p>A\u00f1adiendo WP_HOME Y WP_SITEURL a wp-config.php:</p> <p></p> <p>Configurando las variables de wp-blog-header y vamos a darle permisos de usuario y grupo a www-data:</p> <p></p> <p>Ahora vamos a hacer la instalaci\u00f3n de certbot.  Para esto antes debemos instalarnos snap.</p> <p></p> <p>Voy a mostrar mi inventario:</p> <p></p> <p>Voy a mostrar las variables usadas para esta fase 0:</p> <p></p> <p>Ahora vamos a comprobar que nos funciona, para eso vamos a irnos a nuestro navegador web y vamos a escribir nuestro dominio:</p> <p></p> <p>Como vemos nos sale para seleccionar nuestro idioma en la pagina de wordpress. Una vez seleccionado tenemos que rellenar lo que nos pone con nuestros datos:</p> <p></p> <p>Una vez hecho esto inicias sesi\u00f3n:</p> <p></p> <p>Ya deberias de estar en la pagina de wordpress:</p> <p></p>"},{"location":"practica9/#fase-1","title":"Fase 1","text":"<p>Ahora vamos a empezar la fase 1. Para esta fase vamos a necesitar dos m\u00e1quinas funcionando, una que se encargara del servidor web y otra de MYSQL.</p> <p>Vamos a empezar por explicar el install_deploy que sera donde estara la instalaci\u00f3n de MYSQL:</p> <p></p> <p>Ahora vamos a irnos al install_frontend donde vamos a instalarnos el servidor Apache:</p> <p></p> <p>Ahora vamos a explicar el deploy_backend,aqui sera donde vamos a crearnos la base de datos de wordpress y el usuario:</p> <p></p> <p>Ahora vamos a irnos al deploy_wordpress, que sera la configuracion de la maquina frontend. Esto no va a cambiar mucho de la anterior fase. Nos descargamos wordpress y lo descomprimimos:</p> <p></p> <p>Configuramos las variables de conexion de DB_USER, DB_PASS, DB_HOST y a\u00f1adimos WP_HOME Y WP_SITEURL a wp-config.php</p> <p></p> <p>Ahora vamos a Cnfiguramos las variables de wp-blog-header y vamos a a\u00f1adir permisos de usuario y grupo a www-data</p> <p></p> <p>Por ultimo nos queda instalar certbot:</p> <p></p> <p>Las variables que he usado son las mismas que antes pero cambiando en este caso el dominio y el host privado por la ip privada de mi maquina backend:</p> <p></p> <p>Para comprobar que me funciona le he cambiado el dominio de antes pero los pasos son los mismos:</p> <p></p> <p></p> <p></p> <ul> <li>Fase 02</li> </ul> <p>Ahora vamos a explicar la fase 02.  Para esta fase vamos a necesitar un total de 5 maquinas. Una backend donde se encuentra la basde de datos MYSQL, dos maquinas frontend donde se encuentras el servidor apache, una maquina parael servidor nfs y por ultimo una maquina balanceadora donde tendra un proxy inverso.</p> <p>Como ya he explicado el backend y los frontend  en la anterior fase, voy a explicar directamente lo que van a tener mis m\u00e1quinas nfs y balanceador.</p> <p>Empezamos por la m\u00e1quina nfs. Podemos crearnos dos yml, uno que sera para el cliente nfs que seran nuestras dos maquinas frontend y otra para el servidor nfs que sera nuestra propia maquina nfs.</p> <p>Lo que tendran nuestros clientes sera la instalaci\u00f3n del cleinte nfs y el directorio compartido:</p> <p></p> <p>Nuestro servidor nfs tendr\u00e1 la instalacion del servidor nfs, la creacion del directorio y pasamos el archivo de conf a /etc/exports</p> <p></p> <p>Ahora vamos a irnos a nuestro balanceador donde vamos a instalarnos los modulos del proxy inverso:</p> <p></p> <p>Configuramos los ficheros .conf:</p> <p></p> <p>Instalamos certbot:</p> <p></p> <p>Las variables que he usado son:</p> <p></p>"}]}